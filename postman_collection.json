{
	"info": {
		"_postman_id": "24e6a133-0e6b-4aba-9ece-b19bd979a311",
		"name": "Announcement Content Service",
		"description": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1918409"
	},
	"item": [
		{
			"name": "Request Methods",
			"item": [
				{
					"name": "GET Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body has json with request queries\", function () {",
									"    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
									"        .and.have.jsonBody('args.foo2', 'bar2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dr009bdrr9.execute-api.eu-central-1.amazonaws.com/dev/announcements",
							"protocol": "https",
							"host": [
								"dr009bdrr9",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"announcements"
							]
						},
						"description": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested."
					},
					"response": []
				},
				{
					"name": "GET with limit&offset",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dr009bdrr9.execute-api.eu-central-1.amazonaws.com/dev/announcements?limit=2&offset=2",
							"protocol": "https",
							"host": [
								"dr009bdrr9",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"announcements"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Form Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response body has json with form data\", function () {",
									"    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
									"        .and.have.jsonBody('form.foo2', 'bar2');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"title\": \"some_title7\",\r\n\"description\": \"some description7\",\r\n\"date\": \"2012-12-12\"}"
						},
						"url": {
							"raw": "https://dr009bdrr9.execute-api.eu-central-1.amazonaws.com/dev/announcements",
							"protocol": "https",
							"host": [
								"dr009bdrr9",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"announcements"
							]
						},
						"description": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter."
					},
					"response": []
				},
				{
					"name": "GET with huge offset (empty page)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dr009bdrr9.execute-api.eu-central-1.amazonaws.com/dev/announcements?limit=2&offset=1000",
							"protocol": "https",
							"host": [
								"dr009bdrr9",
								"execute-api",
								"eu-central-1",
								"amazonaws",
								"com"
							],
							"path": [
								"dev",
								"announcements"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								},
								{
									"key": "offset",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n"
		}
	]
}